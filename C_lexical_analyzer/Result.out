< # , - >
< ±êÊ¶·û , include >
< < , - >
< ±êÊ¶·û , iostream >
< > , - >
< using , ¹Ø¼ü×Ö >
< namespace , ¹Ø¼ü×Ö >
< ±êÊ¶·û , std >
< ; , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , main >
< ( , - >
< ) , - >
< { , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , x >
< = , - >
< Êý×Ö , 12 >
< ; , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , y >
< = , - >
< Êý×Ö , 14.5 >
< ; , - >
< ±êÊ¶·û , cout >
< << , - >
< ±êÊ¶·û , x >
< + , - >
< ±êÊ¶·û , y >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , cout >
< << , - >
< ( , - >
< ±êÊ¶·û , x >
< >> , - >
< Êý×Ö , 1 >
< ) , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , cout >
< << , - >
< ( , - >
< ±êÊ¶·û , x >
< = , - >
< ±êÊ¶·û , x >
< << , - >
< Êý×Ö , 1 >
< ) , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , a >
< = , - >
< ; , - >
< ±êÊ¶·û , itn >
< ±êÊ¶·û , v >
< = , - >
< ; , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , ss >
< = , - >
< ; , - >
< ±êÊ¶·û , dafdaf >
< return , ¹Ø¼ü×Ö >
< Êý×Ö , 0 >
< ; , - >
< } , - >
< # , - >
< ±êÊ¶·û , include >
< " , - >
< ×Ö·û´® , stdafx.h >
< " , - >
< # , - >
< ±êÊ¶·û , include >
< < , - >
< ±êÊ¶·û , cstdio >
< > , - >
< # , - >
< ±êÊ¶·û , include >
< < , - >
< ±êÊ¶·û , string >
< > , - >
< # , - >
< ±êÊ¶·û , include >
< < , - >
< ±êÊ¶·û , ctype >
< . , - >
< ±êÊ¶·û , h >
< > , - >
< # , - >
< ±êÊ¶·û , include >
< < , - >
< ±êÊ¶·û , fstream >
< > , - >
< using , ¹Ø¼ü×Ö >
< namespace , ¹Ø¼ü×Ö >
< ±êÊ¶·û , std >
< ; , - >
< const , ¹Ø¼ü×Ö >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , RESERVEWORDNUM >
< = , - >
< Êý×Ö , 73 >
< ; , - >
< const , ¹Ø¼ü×Ö >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , OPERATORNUM >
< = , - >
< Êý×Ö , 37 >
< ; , - >
< const , ¹Ø¼ü×Ö >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , SPERATEOPERATOR >
< = , - >
< Êý×Ö , 15 >
< ; , - >
< const , ¹Ø¼ü×Ö >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , DELIMITERSNUM >
< = , - >
< Êý×Ö , 11 >
< ; , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , lineNumber >
< = , - >
< Êý×Ö , 1 >
< ; , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , errorMessage >
< = , - >
< " , - >
< " , - >
< ; , - >
< ±êÊ¶·û , ofstream >
< ±êÊ¶·û , cout >
< ( , - >
< " , - >
< ×Ö·û´® , Result.out >
< " , - >
< ) , - >
< ; , - >
< ±êÊ¶·û , ifstream >
< ±êÊ¶·û , cin >
< ( , - >
< " , - >
< ×Ö·û´® , Resource.in >
< " , - >
< ) , - >
< ; , - >
< static , ¹Ø¼ü×Ö >
< ±êÊ¶·û , string >
< ±êÊ¶·û , ReserveWord >
< [ , - >
< ±êÊ¶·û , RESERVEWORDNUM >
< ] , - >
< = , - >
< { , - >
< " , - >
< ×Ö·û´® , asm >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , do >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , if >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , return >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , typedef >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , auto >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , double >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , inline >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , short >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , typeid >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , bool >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , dynamic_cast >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , int >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , signed >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , typename >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , break >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , else >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , long >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , sizeof >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , union >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , case >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , enum >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , mutable >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , static >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , unsigned >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , catch >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , explicit >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , namespace >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , static_cast >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , using >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , char >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , export >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , new >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , struct >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , virtual >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , class >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , extern >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , operator >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , switch >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , void >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , const >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , false >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , private >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , template >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , volatile >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , const_cast >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , float >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , protected >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , this >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , wchar_t >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , continue >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , for >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , public >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , throw >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , while >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , default >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , friend >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , register >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , true >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , delete >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , goto >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , reinterpret_cast >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , try >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , alignas >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , alignof >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , char16_t >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , char32_t >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , constexpr >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , decltype >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , noexcept >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , nullptr >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , static_assert >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , thread_local >
< " , - >
< } , - >
< ; , - >
< static , ¹Ø¼ü×Ö >
< char , ¹Ø¼ü×Ö >
< ±êÊ¶·û , SperateOperator >
< [ , - >
< ±êÊ¶·û , SPERATEOPERATOR >
< ] , - >
< = , - >
< { , - >
< ' , - >
< ×Ö·û³£Á¿ , + , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , - , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , * , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , / , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , > , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , = , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , < , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , ! , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , ^ , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , & , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , | , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , % , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , ~ , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , \? >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , : , - >
< ' , - >
< } , - >
< ; , - >
< static , ¹Ø¼ü×Ö >
< ±êÊ¶·û , string >
< ±êÊ¶·û , Operator >
< [ , - >
< ±êÊ¶·û , OPERATORNUM >
< ] , - >
< = , - >
< { , - >
< " , - >
< ×Ö·û´® , + >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , - >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , * >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , / >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , ++ >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , -- >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , < >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , <= >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , > >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , >= >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , = >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , == >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , != >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , ^ >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , & >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , && >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , | >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , || >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , ! >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , % >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , ~ >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , << >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , >> >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , . >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , \? >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , : >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , += >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , -= >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , /= >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , *= >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , %= >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , >>= >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , <<= >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , &= >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , ^= >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , |= >
< " , - >
< , , - >
< " , - >
< ×Ö·û´® , -> >
< " , - >
< } , - >
< ; , - >
< static , ¹Ø¼ü×Ö >
< char , ¹Ø¼ü×Ö >
< ±êÊ¶·û , Delimiters >
< [ , - >
< ±êÊ¶·û , DELIMITERSNUM >
< ] , - >
< = , - >
< { , - >
< ' , - >
< ×Ö·û³£Á¿ , ; , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , ( , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , ) , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , , , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , # , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , [ , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , ] , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , { , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , } , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , : , - >
< ' , - >
< , , - >
< ' , - >
< ×Ö·û³£Á¿ , . , - >
< ' , - >
< } , - >
< ; , - >
< static , ¹Ø¼ü×Ö >
< bool , ¹Ø¼ü×Ö >
< ±êÊ¶·û , isReserveWord >
< ( , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , str >
< ) , - >
< { , - >
< for , ¹Ø¼ü×Ö >
< ( , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , i >
< = , - >
< Êý×Ö , 0 >
< ; , - >
< ±êÊ¶·û , i >
< < , - >
< ±êÊ¶·û , RESERVEWORDNUM >
< ; , - >
< ±êÊ¶·û , i >
< ++ , - >
< ) , - >
< { , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , str >
< == , - >
< ±êÊ¶·û , ReserveWord >
< [ , - >
< ±êÊ¶·û , i >
< ] , - >
< ) , - >
< return , ¹Ø¼ü×Ö >
< true , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< return , ¹Ø¼ü×Ö >
< false , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< static , ¹Ø¼ü×Ö >
< bool , ¹Ø¼ü×Ö >
< ±êÊ¶·û , isOperator >
< ( , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , str >
< ) , - >
< { , - >
< for , ¹Ø¼ü×Ö >
< ( , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , i >
< = , - >
< Êý×Ö , 0 >
< ; , - >
< ±êÊ¶·û , i >
< < , - >
< ±êÊ¶·û , OPERATORNUM >
< ; , - >
< ±êÊ¶·û , i >
< ++ , - >
< ) , - >
< { , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , str >
< == , - >
< ±êÊ¶·û , Operator >
< [ , - >
< ±êÊ¶·û , i >
< ] , - >
< ) , - >
< return , ¹Ø¼ü×Ö >
< true , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< return , ¹Ø¼ü×Ö >
< false , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< static , ¹Ø¼ü×Ö >
< bool , ¹Ø¼ü×Ö >
< ±êÊ¶·û , isDelimiters >
< ( , - >
< char , ¹Ø¼ü×Ö >
< ±êÊ¶·û , ch >
< ) , - >
< { , - >
< for , ¹Ø¼ü×Ö >
< ( , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , i >
< = , - >
< Êý×Ö , 0 >
< ; , - >
< ±êÊ¶·û , i >
< < , - >
< ±êÊ¶·û , DELIMITERSNUM >
< ; , - >
< ±êÊ¶·û , i >
< ++ , - >
< ) , - >
< { , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , ch >
< == , - >
< ±êÊ¶·û , Delimiters >
< [ , - >
< ±êÊ¶·û , i >
< ] , - >
< ) , - >
< return , ¹Ø¼ü×Ö >
< true , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< return , ¹Ø¼ü×Ö >
< false , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< static , ¹Ø¼ü×Ö >
< bool , ¹Ø¼ü×Ö >
< ±êÊ¶·û , isSperateOperator >
< ( , - >
< char , ¹Ø¼ü×Ö >
< ±êÊ¶·û , ch >
< ) , - >
< { , - >
< for , ¹Ø¼ü×Ö >
< ( , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , i >
< = , - >
< Êý×Ö , 0 >
< ; , - >
< ±êÊ¶·û , i >
< < , - >
< ±êÊ¶·û , SPERATEOPERATOR >
< ; , - >
< ±êÊ¶·û , i >
< ++ , - >
< ) , - >
< { , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , ch >
< == , - >
< ±êÊ¶·û , SperateOperator >
< [ , - >
< ±êÊ¶·û , i >
< ] , - >
< ) , - >
< return , ¹Ø¼ü×Ö >
< true , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< return , ¹Ø¼ü×Ö >
< false , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< void , ¹Ø¼ü×Ö >
< ±êÊ¶·û , lexical_analyze >
< ( , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , resource >
< , , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , location >
< ) , - >
< { , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , len >
< = , - >
< ±êÊ¶·û , resource >
< . , - >
< ±êÊ¶·û , length >
< ( , - >
< ) , - >
< ; , - >
< while , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , location >
< < , - >
< ±êÊ¶·û , len >
< ) , - >
< { , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ ,   , - >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ! , - >
< ±êÊ¶·û , isprint >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \n >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , lineNumber >
< ++ , - >
< ; , - >
< } , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , / , - >
< ' , - >
< && , - >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , * , - >
< ' , - >
< || , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , / , - >
< ' , - >
< ) , - >
< ) , - >
< { , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , temp_annotation >
< = , - >
< " , - >
< " , - >
< ; , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , / , - >
< ' , - >
< ) , - >
< { , - >
< while , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< != , - >
< ' , - >
< ×Ö·û³£Á¿ , \n >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< } , - >
< ±êÊ¶·û , lineNumber >
< ++ , - >
< ; , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , * , - >
< ' , - >
< ) , - >
< { , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , tmp_loc >
< = , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 2 >
< ; , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , temp_line >
< = , - >
< ±êÊ¶·û , lineNumber >
< ; , - >
< while , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , tmp_loc >
< < , - >
< ±êÊ¶·û , len >
< - , - >
< Êý×Ö , 1 >
< && , - >
< ! , - >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , tmp_loc >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , * , - >
< ' , - >
< && , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , tmp_loc >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , / , - >
< ' , - >
< ) , - >
< ) , - >
< { , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , tmp_loc >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \n >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , temp_line >
< ++ , - >
< ; , - >
< } , - >
< ±êÊ¶·û , tmp_loc >
< ++ , - >
< ; , - >
< } , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , tmp_loc >
< >= , - >
< ±êÊ¶·û , len >
< - , - >
< Êý×Ö , 1 >
< ) , - >
< { , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , tmp >
< = , - >
< " , - >
< ×Ö·û´® , µÚ  >
< " , - >
< + , - >
< ±êÊ¶·û , to_string >
< ( , - >
< ±êÊ¶·û , lineNumber >
< ) , - >
< + , - >
< " , - >
< ×Ö·û´® ,  ÐÐ×¢ÊÍÓÐ´íÎó\n >
< " , - >
< ; , - >
< ±êÊ¶·û , errorMessage >
< = , - >
< ±êÊ¶·û , errorMessage >
< + , - >
< ±êÊ¶·û , tmp >
< ; , - >
< ±êÊ¶·û , location >
< += , - >
< Êý×Ö , 2 >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , location >
< = , - >
< ±êÊ¶·û , tmp_loc >
< + , - >
< Êý×Ö , 2 >
< ; , - >
< ±êÊ¶·û , lineNumber >
< = , - >
< ±êÊ¶·û , temp_line >
< ; , - >
< } , - >
< } , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isalpha >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ) , - >
< || , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , _ , - >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , temp_identifier >
< = , - >
< " , - >
< " , - >
< ; , - >
< bool , ¹Ø¼ü×Ö >
< ±êÊ¶·û , isWrong >
< = , - >
< false , ¹Ø¼ü×Ö >
< ; , - >
< ±êÊ¶·û , temp_identifier >
< = , - >
< ±êÊ¶·û , temp_identifier >
< + , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ; , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< while , ¹Ø¼ü×Ö >
< ( , - >
< ! , - >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ ,   , - >
< ' , - >
< || , - >
< ±êÊ¶·û , isSperateOperator >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ) , - >
< || , - >
< ±êÊ¶·û , isDelimiters >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ) , - >
< || , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \n >
< ' , - >
< ) , - >
< ) , - >
< { , - >
< ±êÊ¶·û , temp_identifier >
< = , - >
< ±êÊ¶·û , temp_identifier >
< + , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ; , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ! , - >
< ( , - >
< ±êÊ¶·û , isalnum >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ) , - >
< || , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , _ , - >
< ' , - >
< ) , - >
< ) , - >
< { , - >
< ±êÊ¶·û , isWrong >
< = , - >
< true , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< } , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isReserveWord >
< ( , - >
< ±êÊ¶·û , temp_identifier >
< ) , - >
< ) , - >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , <  >
< " , - >
< << , - >
< ±êÊ¶·û , temp_identifier >
< << , - >
< " , - >
< ×Ö·û´® ,  , ¹Ø¼ü×Ö > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ! , - >
< ±êÊ¶·û , isWrong >
< ) , - >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , < ±êÊ¶·û ,  >
< " , - >
< << , - >
< ±êÊ¶·û , temp_identifier >
< << , - >
< " , - >
< ×Ö·û´® ,  > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , tmp >
< = , - >
< " , - >
< ×Ö·û´® , µÚ  >
< " , - >
< + , - >
< ±êÊ¶·û , to_string >
< ( , - >
< ±êÊ¶·û , lineNumber >
< ) , - >
< + , - >
< " , - >
< ×Ö·û´® ,  ÐÐ±êÊ¶·û >
< " , - >
< + , - >
< ±êÊ¶·û , temp_identifier >
< + , - >
< " , - >
< ×Ö·û´® , ÓÐ´íÎó£¡\n >
< " , - >
< ; , - >
< ±êÊ¶·û , errorMessage >
< = , - >
< ±êÊ¶·û , errorMessage >
< + , - >
< ±êÊ¶·û , tmp >
< ; , - >
< } , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isdigit >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , temp_number >
< = , - >
< " , - >
< " , - >
< ; , - >
< enum , ¹Ø¼ü×Ö >
< ±êÊ¶·û , States >
< { , - >
< ±êÊ¶·û , Start >
< , , - >
< ±êÊ¶·û , One >
< , , - >
< ±êÊ¶·û , Two >
< , , - >
< ±êÊ¶·û , Three >
< , , - >
< ±êÊ¶·û , Four >
< , , - >
< ±êÊ¶·û , Five >
< , , - >
< ±êÊ¶·û , Six >
< , , - >
< ±êÊ¶·û , Seven >
< , , - >
< ±êÊ¶·û , Err >
< } , - >
< ; , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , i >
< = , - >
< Êý×Ö , 0 >
< , , - >
< ±êÊ¶·û , flag >
< = , - >
< Êý×Ö , 0 >
< ; , - >
< char , ¹Ø¼ü×Ö >
< ±êÊ¶·û , ch >
< ; , - >
< enum , ¹Ø¼ü×Ö >
< ±êÊ¶·û , States >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Start >
< ; , - >
< while , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , ch >
< = , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ) , - >
< { , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , flag >
< ) , - >
< { , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< switch , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , state >
< ) , - >
< { , - >
< case , ¹Ø¼ü×Ö >
< ±êÊ¶·û , Start >
< : , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isdigit >
< ( , - >
< ±êÊ¶·û , ch >
< ) , - >
< ) , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , One >
< ; , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , . , - >
< ' , - >
< ) , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Six >
< ; , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Err >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Err >
< || , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Seven >
< ) , - >
< { , - >
< ±êÊ¶·û , temp_number >
< = , - >
< ±êÊ¶·û , temp_number >
< + , - >
< ±êÊ¶·û , ch >
< ; , - >
< } , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< case , ¹Ø¼ü×Ö >
< ±êÊ¶·û , One >
< : , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isdigit >
< ( , - >
< ±êÊ¶·û , ch >
< ) , - >
< ) , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , One >
< ; , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , . , - >
< ' , - >
< ) , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Two >
< ; , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isDelimiters >
< ( , - >
< ±êÊ¶·û , ch >
< ) , - >
< || , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ ,   , - >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Seven >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , E , - >
< ' , - >
< || , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , D , - >
< ' , - >
< || , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , e , - >
< ' , - >
< || , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , d , - >
< ' , - >
< ) , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Three >
< ; , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \n >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Seven >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Err >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Err >
< && , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Seven >
< ) , - >
< { , - >
< ±êÊ¶·û , temp_number >
< = , - >
< ±êÊ¶·û , temp_number >
< + , - >
< ±êÊ¶·û , ch >
< ; , - >
< } , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< case , ¹Ø¼ü×Ö >
< ±êÊ¶·û , Two >
< : , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isdigit >
< ( , - >
< ±êÊ¶·û , ch >
< ) , - >
< ) , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Two >
< ; , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , E , - >
< ' , - >
< || , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , D , - >
< ' , - >
< || , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , e , - >
< ' , - >
< || , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , d , - >
< ' , - >
< ) , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Three >
< ; , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isDelimiters >
< ( , - >
< ±êÊ¶·û , ch >
< ) , - >
< || , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ ,   , - >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Seven >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Err >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Err >
< && , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Seven >
< ) , - >
< { , - >
< ±êÊ¶·û , temp_number >
< = , - >
< ±êÊ¶·û , temp_number >
< + , - >
< ±êÊ¶·û , ch >
< ; , - >
< } , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< case , ¹Ø¼ü×Ö >
< ±êÊ¶·û , Three >
< : , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , + , - >
< ' , - >
< || , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , - , - >
< ' , - >
< ) , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Four >
< ; , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isdigit >
< ( , - >
< ±êÊ¶·û , ch >
< ) , - >
< ) , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Five >
< ; , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Err >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Err >
< && , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Seven >
< ) , - >
< { , - >
< ±êÊ¶·û , temp_number >
< = , - >
< ±êÊ¶·û , temp_number >
< + , - >
< ±êÊ¶·û , ch >
< ; , - >
< } , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< case , ¹Ø¼ü×Ö >
< ±êÊ¶·û , Four >
< : , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isdigit >
< ( , - >
< ±êÊ¶·û , ch >
< ) , - >
< ) , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Five >
< ; , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Err >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Err >
< && , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Seven >
< ) , - >
< { , - >
< ±êÊ¶·û , temp_number >
< = , - >
< ±êÊ¶·û , temp_number >
< + , - >
< ±êÊ¶·û , ch >
< ; , - >
< } , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< case , ¹Ø¼ü×Ö >
< ±êÊ¶·û , Five >
< : , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isdigit >
< ( , - >
< ±êÊ¶·û , ch >
< ) , - >
< ) , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Five >
< ; , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isDelimiters >
< ( , - >
< ±êÊ¶·û , ch >
< ) , - >
< || , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ ,   , - >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Seven >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Err >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Err >
< && , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Seven >
< ) , - >
< { , - >
< ±êÊ¶·û , temp_number >
< = , - >
< ±êÊ¶·û , temp_number >
< + , - >
< ±êÊ¶·û , ch >
< ; , - >
< } , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< case , ¹Ø¼ü×Ö >
< ±êÊ¶·û , Six >
< : , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isdigit >
< ( , - >
< ±êÊ¶·û , ch >
< ) , - >
< ) , - >
< { , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Two >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , state >
< = , - >
< ±êÊ¶·û , Err >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Err >
< && , - >
< ±êÊ¶·û , state >
< != , - >
< ±êÊ¶·û , Seven >
< ) , - >
< { , - >
< ±êÊ¶·û , temp_number >
< = , - >
< ±êÊ¶·û , temp_number >
< + , - >
< ±êÊ¶·û , ch >
< ; , - >
< } , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< case , ¹Ø¼ü×Ö >
< ±êÊ¶·û , Seven >
< : , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \n >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , lineNumber >
< ++ , - >
< ; , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< } , - >
< ±êÊ¶·û , flag >
< = , - >
< Êý×Ö , 1 >
< ; , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< case , ¹Ø¼ü×Ö >
< ±êÊ¶·û , Err >
< : , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , flag >
< == , - >
< Êý×Ö , 0 >
< ) , - >
< { , - >
< while , ¹Ø¼ü×Ö >
< ( , - >
< ! , - >
< ( , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ ,   , - >
< ' , - >
< || , - >
< ±êÊ¶·û , isSperateOperator >
< ( , - >
< ±êÊ¶·û , ch >
< ) , - >
< || , - >
< ±êÊ¶·û , isDelimiters >
< ( , - >
< ±êÊ¶·û , ch >
< ) , - >
< || , - >
< ±êÊ¶·û , ch >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \n >
< ' , - >
< ) , - >
< ) , - >
< { , - >
< ±êÊ¶·û , temp_number >
< += , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ; , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< ±êÊ¶·û , ch >
< = , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ; , - >
< } , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , tmp >
< = , - >
< " , - >
< ×Ö·û´® , µÚ  >
< " , - >
< + , - >
< ±êÊ¶·û , to_string >
< ( , - >
< ±êÊ¶·û , lineNumber >
< ) , - >
< + , - >
< " , - >
< ×Ö·û´® ,  ÐÐ³£Êý >
< " , - >
< + , - >
< ±êÊ¶·û , temp_number >
< + , - >
< " , - >
< ×Ö·û´® , ÓÐ´íÎó£¡\n >
< " , - >
< ; , - >
< ±êÊ¶·û , errorMessage >
< = , - >
< ±êÊ¶·û , errorMessage >
< + , - >
< ±êÊ¶·û , tmp >
< ; , - >
< ±êÊ¶·û , flag >
< = , - >
< Êý×Ö , 1 >
< ; , - >
< } , - >
< break , ¹Ø¼ü×Ö >
< ; , - >
< } , - >
< } , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , state >
< == , - >
< ±êÊ¶·û , One >
< || , - >
< ±êÊ¶·û , state >
< == , - >
< ±êÊ¶·û , Two >
< || , - >
< ±êÊ¶·û , state >
< == , - >
< ±êÊ¶·û , Five >
< || , - >
< ±êÊ¶·û , state >
< == , - >
< ±êÊ¶·û , Seven >
< ) , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , < Êý×Ö ,  >
< " , - >
< << , - >
< ±êÊ¶·û , temp_number >
< << , - >
< " , - >
< ×Ö·û´® ,  > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , " , - >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , temp_string >
< = , - >
< " , - >
< " , - >
< ; , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , <  >
< " , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< << , - >
< " , - >
< ×Ö·û´® ,  , - > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , tmp_loc >
< = , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ; , - >
< while , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , tmp_loc >
< ] , - >
< != , - >
< ' , - >
< ×Ö·û³£Á¿ , " , - >
< ' , - >
< && , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , tmp_loc >
< ] , - >
< != , - >
< ' , - >
< ×Ö·û³£Á¿ , \n >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , temp_string >
< = , - >
< ±êÊ¶·û , temp_string >
< + , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , tmp_loc >
< ] , - >
< ; , - >
< ±êÊ¶·û , tmp_loc >
< ++ , - >
< ; , - >
< } , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , tmp_loc >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , " , - >
< ' , - >
< ) , - >
< { , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , tmp_loc >
< - , - >
< ±êÊ¶·û , location >
< > , - >
< Êý×Ö , 1 >
< ) , - >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , < ×Ö·û´® ,  >
< " , - >
< << , - >
< ±êÊ¶·û , temp_string >
< << , - >
< " , - >
< ×Ö·û´® ,  > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< } , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , <  >
< " , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , tmp_loc >
< ] , - >
< << , - >
< " , - >
< ×Ö·û´® ,  , - > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , location >
< = , - >
< ±êÊ¶·û , tmp_loc >
< ; , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , tmp_loc >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \n >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , tmp >
< = , - >
< " , - >
< ×Ö·û´® , µÚ  >
< " , - >
< + , - >
< ±êÊ¶·û , to_string >
< ( , - >
< ±êÊ¶·û , lineNumber >
< ) , - >
< + , - >
< " , - >
< ×Ö·û´® ,  ÐÐÓÐ´íÎó£¬¶àÓàË«ÒýºÅ£¡\n >
< " , - >
< ; , - >
< ±êÊ¶·û , errorMessage >
< = , - >
< ±êÊ¶·û , errorMessage >
< + , - >
< ±êÊ¶·û , tmp >
< ; , - >
< ±êÊ¶·û , lineNumber >
< ++ , - >
< ; , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< } , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \' >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , <  >
< " , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< << , - >
< " , - >
< ×Ö·û´® ,  , - > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \' >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , <  >
< " , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< << , - >
< " , - >
< ×Ö·û´® ,  , - > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \\ >
< ' , - >
< && , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 2 >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \' >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , < ×Ö·û³£Á¿ ,  >
< " , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< << , - >
< " , - >
< ×Ö·û´® ,  > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , <  >
< " , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 2 >
< ] , - >
< << , - >
< " , - >
< ×Ö·û´® ,  , - > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , location >
< += , - >
< Êý×Ö , 3 >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \' >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , < ×Ö·û³£Á¿ ,  >
< " , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< << , - >
< " , - >
< ×Ö·û´® ,  , - > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , <  >
< " , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< << , - >
< " , - >
< ×Ö·û´® ,  , - > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , location >
< += , - >
< Êý×Ö , 2 >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , tmp >
< = , - >
< " , - >
< ×Ö·û´® , µÚ  >
< " , - >
< + , - >
< ±êÊ¶·û , to_string >
< ( , - >
< ±êÊ¶·û , lineNumber >
< ) , - >
< + , - >
< " , - >
< ×Ö·û´® ,  ÐÐÓÐ´íÎó£¬¶àÓàµ¥ÒýºÅ£¡\n >
< " , - >
< ; , - >
< ±êÊ¶·û , errorMessage >
< = , - >
< ±êÊ¶·û , errorMessage >
< + , - >
< ±êÊ¶·û , tmp >
< ; , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , \n >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , lineNumber >
< ++ , - >
< ; , - >
< } , - >
< } , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isDelimiters >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , <  >
< " , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< << , - >
< " , - >
< ×Ö·û´® ,  , - > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isSperateOperator >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , < , - >
< ' , - >
< && , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , < , - >
< ' , - >
< && , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 2 >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , = , - >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , <  >
< " , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 2 >
< ] , - >
< << , - >
< " , - >
< ×Ö·û´® ,  , - > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , location >
< += , - >
< Êý×Ö , 3 >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , > , - >
< ' , - >
< && , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , > , - >
< ' , - >
< && , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 2 >
< ] , - >
< == , - >
< ' , - >
< ×Ö·û³£Á¿ , = , - >
< ' , - >
< ) , - >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , <  >
< " , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 2 >
< ] , - >
< << , - >
< " , - >
< ×Ö·û´® ,  , - > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , location >
< += , - >
< Êý×Ö , 3 >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isSperateOperator >
< ( , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< ) , - >
< ) , - >
< { , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , tmp_Operator >
< = , - >
< " , - >
< " , - >
< ; , - >
< ±êÊ¶·û , tmp_Operator >
< = , - >
< ±êÊ¶·û , tmp_Operator >
< + , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< ; , - >
< ±êÊ¶·û , tmp_Operator >
< = , - >
< ±êÊ¶·û , tmp_Operator >
< + , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< + , - >
< Êý×Ö , 1 >
< ] , - >
< ; , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , isOperator >
< ( , - >
< ±êÊ¶·û , tmp_Operator >
< ) , - >
< ) , - >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , <  >
< " , - >
< << , - >
< ±êÊ¶·û , tmp_Operator >
< << , - >
< " , - >
< ×Ö·û´® ,  , - > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , tmp >
< = , - >
< " , - >
< ×Ö·û´® , µÚ  >
< " , - >
< + , - >
< ±êÊ¶·û , to_string >
< ( , - >
< ±êÊ¶·û , lineNumber >
< ) , - >
< + , - >
< " , - >
< ×Ö·û´® ,  ÐÐÓÐ´íÎó£¡\n >
< " , - >
< ; , - >
< ±êÊ¶·û , errorMessage >
< = , - >
< ±êÊ¶·û , errorMessage >
< + , - >
< ±êÊ¶·û , tmp >
< ; , - >
< } , - >
< ±êÊ¶·û , location >
< += , - >
< Êý×Ö , 2 >
< ; , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , <  >
< " , - >
< << , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< << , - >
< " , - >
< ×Ö·û´® ,  , - > >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , location >
< += , - >
< Êý×Ö , 1 >
< ; , - >
< } , - >
< } , - >
< else , ¹Ø¼ü×Ö >
< { , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , tmp >
< = , - >
< " , - >
< ×Ö·û´® , µÚ  >
< " , - >
< + , - >
< ±êÊ¶·û , to_string >
< ( , - >
< ±êÊ¶·û , lineNumber >
< ) , - >
< + , - >
< " , - >
< ×Ö·û´® ,  ÐÐ²»¿ÉÊ¶±ðµÄ×Ö·û >
< " , - >
< + , - >
< ±êÊ¶·û , resource >
< [ , - >
< ±êÊ¶·û , location >
< ] , - >
< + , - >
< " , - >
< ×Ö·û´® , ! \n >
< " , - >
< ; , - >
< ±êÊ¶·û , errorMessage >
< += , - >
< ±êÊ¶·û , tmp >
< ; , - >
< ±êÊ¶·û , location >
< ++ , - >
< ; , - >
< } , - >
< } , - >
< if , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , errorMessage >
< != , - >
< " , - >
< " , - >
< ) , - >
< { , - >
< ±êÊ¶·û , cout >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , ´úÂë³ö´íµØ·½£º >
< " , - >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< ±êÊ¶·û , cout >
< << , - >
< ±êÊ¶·û , errorMessage >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< } , - >
< } , - >
< int , ¹Ø¼ü×Ö >
< ±êÊ¶·û , main >
< ( , - >
< ) , - >
< { , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , str >
< ; , - >
< ±êÊ¶·û , string >
< ±êÊ¶·û , tmp_str >
< = , - >
< " , - >
< " , - >
< ; , - >
< while , ¹Ø¼ü×Ö >
< ( , - >
< ±êÊ¶·û , getline >
< ( , - >
< ±êÊ¶·û , cin >
< , , - >
< ±êÊ¶·û , str >
< ) , - >
< && , - >
< ±êÊ¶·û , str >
< != , - >
< " , - >
< ×Ö·û´® , EOF >
< " , - >
< ) , - >
< { , - >
< ±êÊ¶·û , tmp_str >
< = , - >
< ±êÊ¶·û , tmp_str >
< + , - >
< ±êÊ¶·û , str >
< + , - >
< ' , - >
< ×Ö·û³£Á¿ , \n >
< ' , - >
< ; , - >
< } , - >
< ±êÊ¶·û , lexical_analyze >
< ( , - >
< ±êÊ¶·û , tmp_str >
< , , - >
< Êý×Ö , 0 >
< ) , - >
< ; , - >
< ±êÊ¶·û , cout >
< << , - >
< " , - >
< ×Ö·û´® , Ô´³ÌÐò×ÜÐÐÊý£º >
< " , - >
< << , - >
< ±êÊ¶·û , lineNumber >
< << , - >
< ±êÊ¶·û , endl >
< ; , - >
< return , ¹Ø¼ü×Ö >
< Êý×Ö , 0 >
< ; , - >
< } , - >

´úÂë³ö´íµØ·½£º
µÚ 11 ÐÐ³£Êý12.abcÓÐ´íÎó£¡
µÚ 12 ÐÐ³£Êý12$asfdÓÐ´íÎó£¡
µÚ 13 ÐÐ±êÊ¶·ûabs$DSÓÐ´íÎó£¡
µÚ 19 ÐÐ×¢ÊÍÓÐ´íÎó

Ô´³ÌÐò×ÜÐÐÊý£º418





